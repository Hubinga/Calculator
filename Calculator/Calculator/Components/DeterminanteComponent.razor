@using Calculator.Classes;
@using Calculator.Models;

@if (!active)
{
	<EditForm Model="@dimensionModel" OnValidSubmit="@Start">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<div class="determinante">
			<div class="child">
				<p>
					<label>
						Dimension:
						<InputText @bind-Value="dimensionModel.Dimension" />
					</label>
				</p>
			</div>
			<button class="button-purple" type="submit">Start</button>
		</div>
	</EditForm>
}
else
{
	<button class="button-purple" @onclick="Solve">Result</button>
	<button class="button-purple" @onclick="Reset">Reset</button>
	<button class="button-purple" @onclick="GenerateRandomInput">Random Input</button>
	<div>
		<MatrixComponent Matrix="matrix" Edit="true"></MatrixComponent>
	</div>	

	@if (solved)
	{
		<div>
			<MatrixComponent Matrix="matrixResult"></MatrixComponent>
			<h3>Determinante: @determinante</h3>
		</div>
	}
}


@code {
	private MatrixDimensionModel dimensionModel = new();
	private bool solved = false;
	private bool active = false;

	private Matrix matrix = new Matrix(3, 3);
	private Matrix matrixResult = new Matrix(3, 3);

	private MatrixHelper matrixHelper = new();

	private double determinante = 0;

	private void Start()
	{
		active = true;
		//start with empty matrix (n,n)-Matrix
		matrix = new Matrix(dimensionModel.RowSize, dimensionModel.RowSize);
		matrixResult = new Matrix(dimensionModel.RowSize, dimensionModel.RowSize);
	}

	private void Reset()
	{
		active = false;
		solved = false;
		
		matrix = new Matrix(3, 3);
		matrixResult = new Matrix(3, 3);
	}

	private void Solve()
	{
		try
		{
			//start with copy of input matrix
			Array.Copy(matrix.MatrixBoard, matrixResult.MatrixBoard, matrix.MatrixBoard.Length);

			determinante = matrixHelper.CalculateDeterminante(matrixResult);
			solved = true;
		}
		catch (GausJordanException e)
		{
			Console.WriteLine(e.Message);
		}
	}

	private void GenerateRandomInput()
	{
		matrix.FillMatrixWithRandomNumbers();
	}
}
