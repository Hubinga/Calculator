@using Calculator.Classes;
@using Calculator.Models;
<!--<h3>(@Matrix.GetLength(0), @Matrix.GetLength(1))-Matrix</h3>-->
@{
	if (EditDimension)
	{
		<EditForm Model="@dimensionModel" OnValidSubmit="@OnDimensionChange">
			<DataAnnotationsValidator />
			<ValidationSummary />
			<div class="matrix-dimension">
				<div class="child">
					<button type="submit">Change Dimension</button>
					<InputText style="width:50px;" id="dimension-input" @bind-Value="dimensionModel.Dimension" />
				</div>	
			</div>
		</EditForm>
	}
}
<div class="@(BracketStyle ? "matrixWithBrackets" : "matrixWithoutBrackets")" style="--col-dimension:@Matrix.MatrixBoard.GetLength(1)">
	@{
		for (int i = 0; i < Matrix.MatrixBoard.GetLength(0); i++)
		{
			for (int j = 0; j < Matrix.MatrixBoard.GetLength(1); j++)
			{
				string cssClassTag = "element";

				if (Edit)
				{
					int currentRowIdx = i;
					int currentColIdx = j;
					<div tabindex="-1" class= "@cssClassTag" @onkeydown="KeyboardEventHandler" @onclick="() => FieldClicked(currentRowIdx, currentColIdx)">@Matrix.MatrixBoard[i,j]</div>	
				}
				else
				{
					<div class= "@cssClassTag">@Matrix.MatrixBoard[i,j]</div>	
				}
			}
		}
	}
</div>

@code {

	private struct Field
	{
		public int RowIdx;
		public int ColIdx;

		public Field(int rowIdx, int colIdx)
		{
			RowIdx = rowIdx;
			ColIdx = colIdx;
		}
	}

	[Parameter]
	public Matrix Matrix { get; set; } = new Matrix(3, 3);
	//custom Input (editable matrix)
	[Parameter]
	public bool Edit { get; set; } = false;
	//Display Border
	[Parameter]
	public bool BracketStyle { get; set; } = true;
	//Dimension can be edit
	[Parameter]
	public bool EditDimension { get; set; } = false;

	private Field activeField = new Field(-1, -1);
	private MatrixDimensionModel dimensionModel = new();

	private void KeyboardEventHandler(KeyboardEventArgs args)
	{
		if (!Edit)
		{
			return;
		}

		if (activeField.RowIdx != -1 && activeField.ColIdx != -1)
		{
			string key = args.Key;

			//clear field
			if (key == "Backspace")
			{
				Matrix.MatrixBoard[activeField.RowIdx, activeField.ColIdx] = 0;
				return;
			}

			int inputNumber;
			if (int.TryParse(key, out inputNumber))
			{
				Matrix.MatrixBoard[activeField.RowIdx, activeField.ColIdx] = Convert.ToInt32(args.Key);
			}
		}
	}

	//set selected field
	private void FieldClicked(int rowIdx, int colIdx)
	{
		if (!Edit)
		{
			return;
		}

		activeField.RowIdx = rowIdx;
		activeField.ColIdx = colIdx;	
	}

	private void OnDimensionChange()
	{
		if (!EditDimension) return;

		Matrix.ChangeDimension(dimensionModel.RowSize, dimensionModel.CollumnSize);
	}
}
