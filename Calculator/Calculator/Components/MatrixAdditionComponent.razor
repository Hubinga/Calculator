@using Calculator.Classes;
@using Calculator.Models;

@{
	if (!active)
	{
		<EditForm Model="@dimensionModel" OnValidSubmit="@Start">
			<DataAnnotationsValidator />
			<ValidationSummary />
			<div class="matrix-addidtion">
				<div class="child">
					<p>
						<label>
							Dimension:
							<InputText @bind-Value="dimensionModel.Dimension" />
						</label>
					</p>
				</div>
				<button class="button-purple" type="submit">Start</button>
			</div>
		</EditForm>
	}
	else
	{
		<button class="button-purple" @onclick="AddMatrix">Add Matrix</button>
		<button class="button-purple" @onclick="Solve">Result</button>
		<button class="button-purple" @onclick="Reset">Reset</button>
		<button class="button-purple" @onclick="GenerateRandomInput">Random Input</button>
		<div class="matrix-addidtion">
			@{
				for (int i = 0; i < matrices.Count; i++)
				{
					<div class="child">
						<MatrixComponent Matrix="matrices[i]" Edit="true"></MatrixComponent>
					</div>

					string sign = i < (matrices.Count - 1) ? "+" : "=";

					<div class="child">
						<p>@sign</p>
					</div>
				}

				if (solved)
				{
					<div class="child">
						<MatrixComponent Matrix="result" Edit="false"></MatrixComponent>
					</div>
				}
			}
		</div>
	}
}

@code {
	private MatrixDimensionModel dimensionModel = new();
	private List<Matrix> matrices = new List<Matrix>();
	private Matrix result = new Matrix(3, 3);
	private bool solved = false;
	private bool active = false;

	private void Start()
	{
		active = true;
		//add 2 empty matrices
		AddMatrix();
		AddMatrix();
	}

	private void AddMatrix()
	{
		matrices.Add(new Matrix(dimensionModel.RowSize, dimensionModel.CollumnSize));
	}

	private void Reset()
	{
		matrices.Clear();
		active = false;
		solved = false;
	}

	private void Solve()
	{
		try
		{
			//start with first matrix
			Matrix m = new Matrix(matrices[0].MatrixBoard);

			//add all other matrices
			for (int i = 1; i < matrices.Count; i++)
			{
				m += matrices[i];
			}

			solved = true;
			result = m;
		}
		catch(WrongDimesnionException e)
		{
			Console.WriteLine(e.Message);
		}
	}

	private void GenerateRandomInput()
	{
		foreach (Matrix matrix in matrices)
		{
			matrix.FillMatrixWithRandomNumbers();
		}
	}
}
